trim <- function(x) gsub("^\\s+|\\s+$", "", x)
dat1$person <- trim(dat1$person)
dat1$description <- trim(dat1$description)
dat1$details <- trim(dat1$details)
# change date format
dat1$date <- as.Date(dat1$date, format = "%m/%d/%Y")
#change columns into factors
dat1$person <- as.factor(dat1$person)
dat1$description <- as.factor(dat1$description)
summary(dat1)
summary(dat1$description)
View(dat1)
dat1 <- read.csv(paste0(project, "/budget1.csv"))
dat2 <- read.csv(paste0(project, "/budget2.csv"))
# function to get rid of whitespaces
trim <- function(x) gsub("^\\s+|\\s+$", "", x)
dat1$person <- trim(dat1$person)
dat1$description <- trim(dat1$description)
dat1$details <- trim(dat1$details)
# change date format
dat1$date <- as.Date(dat1$date, format = "%m/%d/%Y")
#change columns into factors
dat1$person <- as.factor(dat1$person)
dat1$description <- as.factor(dat1$description)
summary(dat1$description)
dat1$description <- ifelse(dat1$description == "vacation", "travel", dat1$description)
summary(dat1$description)
dat1$description <- as.factor(dat1$description)
summary(dat1$description)
View(dat1)
dat1 <- read.csv(paste0(project, "/budget1.csv"))
trim <- function(x) gsub("^\\s+|\\s+$", "", x)
dat1$person <- trim(dat1$person)
dat1$description <- trim(dat1$description)
dat1$details <- trim(dat1$details)
# change date format
dat1$date <- as.Date(dat1$date, format = "%m/%d/%Y")
#change columns into factors
dat1$person <- as.factor(dat1$person)
summary(dat1$description)
dat1$description <- as.factor(dat1$description)
summary(dat1$description)
dat1$description <- ifelse(dat1$description == "vacation", "travel", dat1$description)
summary(dat1$description)
home <- "/Users/xing"
project <- paste0(home, "/Desktop/Budget_R/Data")
# read csv
dat1 <- read.csv(paste0(project, "/budget1.csv"))
# function to get rid of whitespaces
trim <- function(x) gsub("^\\s+|\\s+$", "", x)
dat1$person <- trim(dat1$person)
dat1$description <- trim(dat1$description)
dat1$details <- trim(dat1$details)
# change date format
dat1$date <- as.Date(dat1$date, format = "%m/%d/%Y")
#change columns into factors
dat1$person <- as.factor(dat1$person)
dat1$description <- as.factor(dat1$description)
#summary of dat1 descriptions
summary(dat1$description)
summary(dat1)
exp_by_person <- dat1 %>%
group_by(person) %>%
summarise(expenditure)
exp_by_person <- dat1 %>%
group_by(person) %>%
summarise(exp_person = sum(expenditure), na.rm = T)
View(exp_by_person)
exp_by_person <- dat1 %>%
group_by(person, description) %>%
summarise(exp_person = sum(expenditure), na.rm = T)
View(exp_by_person)
ggplot(exp_by_person, aes(person, exp_person, group = description, fill = description)) +
geom_bar(stat = "identity", position = "dodge", alpha = 0.6) +
xlab("Person") + ylab("Expenditure") + ggtitle("Spending by Person Nov 4, 2015 - Nov 5, 2016") +
theme_economist()
ggplot(exp_by_person, aes(person, exp_person, group = description, fill = description)) +
geom_bar(stat = "identity", alpha = 0.6) +
xlab("Person") + ylab("Expenditure") + ggtitle("Spending by Person Nov 4, 2015 - Nov 5, 2016") +
theme_economist()
dat1 <- read.csv(paste0(project, "/budget1.csv"))
# function to get rid of whitespaces
trim <- function(x) gsub("^\\s+|\\s+$", "", x)
dat1$person <- trim(dat1$person)
dat1$description <- trim(dat1$description)
dat1$details <- trim(dat1$details)
# change date format
dat1$date <- as.Date(dat1$date, format = "%m/%d/%Y")
#change columns into factors
dat1$person <- as.factor(dat1$person)
dat1$description <- as.factor(dat1$description)
#summary of dat1 descriptions
summary(dat1$description)
#change vacation into travel ### ?????
dat1$description <- ifelse(dat1$description == "vacation", "travel", dat1$description)
#let's see how much each person spent
exp_by_person <- dat1 %>%
group_by(person, description) %>%
summarise(exp_person = sum(expenditure), na.rm = T)
#plotted
ggplot(exp_by_person, aes(person, exp_person, group = description, fill = description)) +
geom_bar(stat = "identity", alpha = 0.6) +
xlab("Person") + ylab("Expenditure") + ggtitle("Spending by Person Nov 4, 2015 - Nov 5, 2016") +
theme_economist()
at1 <- read.csv(paste0(project, "/budget1.csv"))
# function to get rid of whitespaces
trim <- function(x) gsub("^\\s+|\\s+$", "", x)
dat1$person <- trim(dat1$person)
dat1$description <- trim(dat1$description)
dat1$details <- trim(dat1$details)
# change date format
dat1$date <- as.Date(dat1$date, format = "%m/%d/%Y")
#change columns into factors
dat1$person <- as.factor(dat1$person)
dat1$description <- as.factor(dat1$description)
#summary of dat1 descriptions
summary(dat1$description)
#change vacation into travel ### ?????
#dat1$description <- ifelse(dat1$description == "vacation", "travel", dat1$description)
#let's see how much each person spent
exp_by_person <- dat1 %>%
group_by(person, description) %>%
summarise(exp_person = sum(expenditure), na.rm = T)
#plotted
ggplot(exp_by_person, aes(person, exp_person, group = description, fill = description)) +
geom_bar(stat = "identity", alpha = 0.6) +
xlab("Person") + ylab("Expenditure") + ggtitle("Spending by Person Nov 4, 2015 - Nov 5, 2016") +
theme_economist()
# load libraries
library(dplyr)
library(ggplot2)
library(ggthemes)
library(tidyr)
library (reshape2)
# initalize folders
home <- "/Users/xing"
project <- paste0(home, "/Desktop/Budget_R/Data")
# read csv
dat1 <- read.csv(paste0(project, "/budget1.csv"))
# function to get rid of whitespaces
trim <- function(x) gsub("^\\s+|\\s+$", "", x)
dat1$person <- trim(dat1$person)
dat1$description <- trim(dat1$description)
dat1$details <- trim(dat1$details)
# change date format
dat1$date <- as.Date(dat1$date, format = "%m/%d/%Y")
#change columns into factors
dat1$person <- as.factor(dat1$person)
dat1$description <- as.factor(dat1$description)
#summary of dat1 descriptions
summary(dat1$description)
#change vacation into travel ### ?????
#dat1$description <- ifelse(dat1$description == "vacation", "travel", dat1$description)
#let's see how much each person spent
exp_by_person <- dat1 %>%
group_by(person, description) %>%
summarise(exp_person = sum(expenditure), na.rm = T)
#plotted
ggplot(exp_by_person, aes(person, exp_person, group = description, fill = description)) +
geom_bar(stat = "identity", alpha = 0.6) +
xlab("Person") + ylab("Expenditure") + ggtitle("Spending by Person Nov 4, 2015 - Nov 5, 2016") +
theme_economist()
dat1$description <- ifelse(dat1$description == "snack", "snsacks", dat1$description)
exp_by_person <- dat1 %>%
group_by(person, description) %>%
summarise(exp_person = sum(expenditure), na.rm = T)
#plotted
ggplot(exp_by_person, aes(person, exp_person, group = description, fill = description)) +
geom_bar(stat = "identity", alpha = 0.6) +
xlab("Person") + ylab("Expenditure") + ggtitle("Spending by Person Nov 4, 2015 - Nov 5, 2016") +
theme_economist()
# read csv
dat1 <- read.csv(paste0(project, "/budget1.csv"))
# function to get rid of whitespaces
trim <- function(x) gsub("^\\s+|\\s+$", "", x)
dat1$person <- trim(dat1$person)
dat1$description <- trim(dat1$description)
dat1$details <- trim(dat1$details)
# change date format
dat1$date <- as.Date(dat1$date, format = "%m/%d/%Y")
#change columns into factors
dat1$person <- as.factor(dat1$person)
dat1$description <- as.factor(dat1$description)
#summary of dat1 descriptions
summary(dat1$description)
#change vacation into travel ### ?????
#dat1$description <- ifelse(dat1$description == "vacation", "travel", dat1$description)
dat1$description <- ifelse(dat1$description = "snack", "snacks", dat1$description)
#let's see how much each person spent
exp_by_person <- dat1 %>%
group_by(person, description) %>%
summarise(exp_person = sum(expenditure), na.rm = T)
#plotted
ggplot(exp_by_person, aes(person, exp_person, group = description, fill = description)) +
geom_bar(stat = "identity", alpha = 0.6) +
xlab("Person") + ylab("Expenditure") + ggtitle("Spending by Person Nov 4, 2015 - Nov 5, 2016") +
theme_economist()
dat1 <- read.csv(paste0(project, "/budget1.csv"))
# function to get rid of whitespaces
trim <- function(x) gsub("^\\s+|\\s+$", "", x)
dat1$person <- trim(dat1$person)
dat1$description <- trim(dat1$description)
dat1$details <- trim(dat1$details)
# change date format
dat1$date <- as.Date(dat1$date, format = "%m/%d/%Y")
#change columns into factors
dat1$person <- as.factor(dat1$person)
dat1$description <- as.factor(dat1$description)
#summary of dat1 descriptions
summary(dat1$description)
dat1 <- read.csv(paste0(project, "/budget1.csv"))
home <- "/Users/xing"
project <- paste0(home, "/Desktop/Budget_R/Data")
# read csv
dat1 <- read.csv(paste0(project, "/budget1.csv"))
# function to get rid of whitespaces
trim <- function(x) gsub("^\\s+|\\s+$", "", x)
dat1$person <- trim(dat1$person)
dat1$description <- trim(dat1$description)
dat1$details <- trim(dat1$details)
# change date format
dat1$date <- as.Date(dat1$date, format = "%m/%d/%Y")
#change columns into factors
dat1$person <- as.factor(dat1$person)
dat1$description <- as.factor(dat1$description)
#summary of dat1 descriptions
summary(dat1$description)
dat1$description <-as.character(dat1$description)
dat1$description <- ifelse(dat1$description == "snack", "snacks", dat1$description)
dat1$description <- as.factor(dat1$description)
summary(dat1$description)
exp_by_person <- dat1 %>%
group_by(person, description) %>%
summarise(exp_person = sum(expenditure), na.rm = T)
#plotted
ggplot(exp_by_person, aes(person, exp_person, group = description, fill = description)) +
geom_bar(stat = "identity", alpha = 0.6) +
xlab("Person") + ylab("Expenditure") + ggtitle("Spending by Person Nov 4, 2015 - Nov 5, 2016") +
theme_economist()
ben_coffee <- dat1 %>%
filter(person == "Ben" & details == "coffee")
View(ben_coffee)
ben_coffee <- dat1 %>%
filter(person == "Ben" & description == "coffee")
View(ben_coffee)
summary(ben_coffee$details)
ben_coffee$details <- as.factor(ben_coffee$details)
summary(ben_coffee$details)
for (i in ben_coffee$description) {
ben_coffee$cum_exp[ben_coffee$description == i] <- cumsum(ben_coffee$expenditure[ben_coffee$description == i])
print(i)
}
ggplot(ben_coffee, aes(x=date, y=cum_exp)) +
geom_line(size = 1) +
xlab("Date") +
ylab("Cumulative Expenditure on Coffee") +
ggtitle("Ben's Spending on Coffee") + theme_economist()
ggplot(ben_coffee, aes(x=date, y=cum_exp)) +
geom_line(size = 2) +
xlab("Date") +
ylab("Cumulative Expenditure on Coffee from Nov 2015- Nov 2016") +
ggtitle("Ben's Spending on Coffee") + theme_economist()
ggplot(ben_coffee, aes(x=date, y=cum_exp)) +
geom_line(size = 2) +
xlab("Date") +
ylab("Cumulative Expenditure on Coffee") +
ggtitle("Ben's Spending on Coffee Nov 2015- Nov 2016") + theme_economist()
ggplot(ben_coffee, aes(x=date, y=cum_exp)) +
geom_line(size = 1) +
xlab("Date") +
ylab("Cumulative Expenditure on Coffee") +
ggtitle("Ben's Spending on Coffee Nov 2015- Nov 2016") + theme_economist()
View(dat1)
library(ggplot2)
library(dplyr)
library(reshape2)
library(ggmap)
library(rgdal)
library(rgeos)
library(maptools)
library(tidyr)
library(tmap)
library(raster) #to read in shapefile
library(sp)
#set working directory
setwd("/Users/xing/Documents/data_TO")
# import data
dat1 <- read.csv("/Users/xing/Documents/data_TO/data/wellbeing_toronto.csv")
# remove unecessary columns
# dat1$X <- NULL
# round decimals
dat1$road_kms <- round(dat1$road_kms, digits = 2)
# add leading zeros to ID number to match map
dat1$neighbourhood_id[1:9] <- paste0("00", dat1$neighbourhood_id[1:9])
dat1$neighbourhood_id[10:99] <- paste0("0", dat1$neighbourhood_id[10:99])
# add new variables to dat1 (with percentages of certain variables)
dat1$percent_low_income <- round((dat1$low_income_population / dat1$total_population)*100, digits = 2)
dat1$percent_recent_imm <- round((dat1$recent_immigrant / dat1$total_population)*100, digits = 2)
dat1$perecent_visible_minority <- round((dat1$visible_minority / dat1$total_population)*100, digits = 2)
dat1$percent_unemployed <- round((dat1$unemployed / dat1$pop_15up)*100, digits = 2)
## MAPS ##
##### read in neighbourhoods shape file #####
map <- shapefile("/Users/xing/Documents/data_TO/maps/NEIGHBORHOODS_WGS84.shp")
## another option to read in shapefile
## map1 <- readOGR(dsn="/Users/xing/Documents/data_TO/maps", layer="NEIGHBORHOODS_UTM6")
# understand shapefile data
head(map)
map$AREA_NAME <- gsub("[[:punct:]]", "", map$AREA_NAME)
map$AREA_NAME <- gsub("[[:digit:]]", "", map$AREA_NAME)
map$AREA_NAME <- gsub("[[:space:]]", "", map$AREA_NAME)
# rename neighbourhood_id to match maps in order to join
names(dat1)[names(dat1) == 'neighbourhood_id'] <- "AREA_S_CD"
# left_join dat1 to map
map@data <- left_join(map@data, dat1)
### to change map data into data.frame, use fortify() eg., map <- fortify(map)
map_f <- fortify(map)
# create a row with row ids in map so that can join with map_f (data.frame)
map$id <- row.names(map)
# join fortified map_f with map
map_f <- left_join(map_f, map@data)
# disable scientific notation
options(scipen = 999)
###
###
# load ttc map and fortify to make data.frame
ttc <- shapefile("/Users/xing/Documents/data_TO/maps/ttc/subway_wgs84.shp")
ttc_f <- fortify(ttc)
# load NIAs and fortify to make data.frame
nia <- shapefile("/Users/xing/Documents/data_TO/maps/nia.shp")
nia_f <- fortify(nia)
###
###
######## plot map data using ggplot2 ##########
plot <- ggplot(map@data, aes(traffic_collisions, walk_score))
plot + geom_point()
map3 <- ggplot(map_f, aes(long, lat, group = group, fill = total_population)) +
geom_polygon() +
theme_nothing(legend = T) + # if you want to have just the map with nothing else, plus legend
scale_fill_distiller(name = "Population", trans = "reverse") +
coord_equal() +
ggtitle("Neigbhourhoods by Population")
map3
rm(places)
ywca <- read.csv("/Users/xing/Documents/data_TO/data/ywca.csv")
View(ywca)
ggplot() +
geom_polygon(data = map_f,
aes(x = long, y = lat, group = group, fill = lone_parent_families), # just change the fill
color = "transparent", size = 0.25) +
geom_polygon(data = nia_f,
aes(x = long, y = lat, group = group),
color = "yellow", fill = "transparent") +
geom_path(data = ttc_f,
aes(x = long, y = lat, group = group)) +
geom_point(data = ywca,
aes(x = long, y = lat),
color = "orange", alpha = 0.6, size = 3) +
geom_text(data = places, aes(long, lat, label = place_name), size = 4) +
coord_map() +
scale_fill_distiller(name = "Lone Parent Families", palette = 2, # choose colour scheme using palette
trans = "reverse") +
theme_nothing(legend = TRUE) +
ggtitle("Plotting Points on Map")
ggplot() +
geom_polygon(data = map_f,
aes(x = long, y = lat, group = group, fill = lone_parent_families), # just change the fill
color = "transparent", size = 0.25) +
geom_polygon(data = nia_f,
aes(x = long, y = lat, group = group),
color = "yellow", fill = "transparent") +
geom_path(data = ttc_f,
aes(x = long, y = lat, group = group)) +
geom_point(data = ywca,
aes(x = long, y = lat),
color = "orange", alpha = 0.6, size = 3) +
geom_text(data = ywca, aes(long, lat, label = place_name), size = 4) +
coord_map() +
scale_fill_distiller(name = "Lone Parent Families", palette = 2, # choose colour scheme using palette
trans = "reverse") +
theme_nothing(legend = TRUE) +
ggtitle("Plotting Points on Map")
ggplot() +
geom_polygon(data = map_f,
aes(x = long, y = lat, group = group, fill = lone_parent_families), # just change the fill
color = "transparent", size = 0.25) +
geom_polygon(data = nia_f,
aes(x = long, y = lat, group = group),
color = "yellow", fill = "transparent") +
geom_path(data = ttc_f,
aes(x = long, y = lat, group = group)) +
geom_point(data = ywca,
aes(x = long, y = lat),
color = "orange", alpha = 0.6, size = 3) +
geom_text(data = ywca, aes(long, lat, label = place_name), size = 4) +
coord_map() +
scale_fill_distiller(name = "Lone Parent Families", palette = 2, # choose colour scheme using palette
trans = "reverse") +
theme_nothing(legend = TRUE) +
ggtitle("YWCA Locations")
install.packages("ggsn")
library(ggsn)
map3
map
plot(map)
map3 +
north(map3) +
scalebar(map3, dist = 5, dd2km = TRUE, model = 'WGS84')
map@data
map_f +
north(map_f) +
scalebar(map_f, dist = 5, dd2km = TRUE, model = 'WGS84')
map_f +
north(map_f)
map3 +
north(map_f) +
scalebar(map_f, dist = 5, dd2km = TRUE, model = 'WGS84')
map3 +
north(map_f) +
scalebar(map_f, dist = 10, dd2km = TRUE, model = 'WGS84')
map3 +
north(map_f) +
scalebar(map_f, dist = 5, dd2km = TRUE, model = 'WGS84')
map3 +
north(map_f) +
scalebar(map_f, dist = 2.5, dd2km = TRUE, model = 'WGS84')
map3 +
north(map_f, symbol = 12, scale = 0.2) +
scalebar(map_f, dist = 2.5, dd2km = TRUE, model = 'WGS84')
map3 +
north(map_f, symbol = 12, scale = 0.15) +
scalebar(map_f, dist = 2.5, dd2km = TRUE, model = 'WGS84')
map3 +
north(map_f, symbol = 12) +
scalebar(map_f, dist = 2.5, dd2km = TRUE, model = 'WGS84')
library(ggplot2)
library(ggmap)
library(dplyr)
library(reshape2)
library(ggsn)
library(tmap)
library(rgeos)
setwd("/Users/xing/Documents/data_TO")
p <- read.csv("/Users/xing/Documents/data_TO/data/places.csv")
p <- read.csv("/Users/xing/Documents/data_TO/data/places_lived.csv")
View(p)
library(leflet)
View(p)
lab <- paste(p$city_name, p$reason_there, sep = " | ")
?setView
m <- leaflet(data = shelters) %>% setView(lng = -79.38318, lat= 43.65323, zoom = 1)
library(leflet)
library(leaflet)
m <- leaflet(data = shelters) %>% setView(lng = -79.38318, lat= 43.65323, zoom = 1)
m <- leaflet(data = p) %>% setView(lng = -79.38318, lat= 43.65323, zoom = 1)
m
m <- leaflet(data = p) %>% setView(lng = -79.38318, lat= 43.65323, zoom = 21)
m <- leaflet(data = p) %>% setView(lng = -79.38318, lat= 43.65323, zoom = 1)
View(p)
places_map <- m %>% addProviderTiles("Stamen.Toner", options = providerTileOptions(opacity = 0.35)) %>%
addCircleMarkers(~long, ~lat, popup = ~as.character(lab),
radius = ~ifelse(total_months > 0 & total_months < 5, 5,
ifelse(total_months >= 5 & total_months < 10, 8, 10)),
stroke = FALSE, fillOpacity = 0.5)
places_map
# make the map
m <- leaflet(data = p) %>% setView(lng = -79.38318, lat= 43.65323, zoom = 5)
places_map <- m %>% addProviderTiles("Stamen.Toner", options = providerTileOptions(opacity = 0.35)) %>%
addCircleMarkers(~long, ~lat, popup = ~as.character(lab),
radius = ~ifelse(total_months > 0 & total_months < 5, 5,
ifelse(total_months >= 5 & total_months < 10, 8, 10)),
stroke = FALSE, fillOpacity = 0.5)
m <- leaflet(data = p) %>% setView(lng = 0, lat= 0, zoom = 5)
places_map <- m %>% addProviderTiles("Stamen.Toner", options = providerTileOptions(opacity = 0.35)) %>%
addCircleMarkers(~long, ~lat, popup = ~as.character(lab),
radius = ~ifelse(total_months > 0 & total_months < 5, 5,
ifelse(total_months >= 5 & total_months < 10, 8, 10)),
stroke = FALSE, fillOpacity = 0.5)
m <- leaflet(data = p) %>% setView(lng = 0, lat= 0, zoom = 8)
places_map <- m %>% addProviderTiles("Stamen.Toner", options = providerTileOptions(opacity = 0.35)) %>%
addCircleMarkers(~long, ~lat, popup = ~as.character(lab),
radius = ~ifelse(total_months > 0 & total_months < 5, 5,
ifelse(total_months >= 5 & total_months < 10, 8, 10)),
stroke = FALSE, fillOpacity = 0.5)
m <- leaflet(data = p) %>% setView(lng = 0, lat= 0)
m <- leaflet(data = p) %>% setView(lng = 0, lat= 0, zoom = 5)
places_map <- m %>% addProviderTiles("Stamen.Toner", options = providerTileOptions(opacity = 0.35)) %>%
addCircleMarkers(~long, ~lat, popup = ~as.character(lab),
radius = ~ifelse(total_months > 0 & total_months < 5, 5,
ifelse(total_months >= 5 & total_months < 10, 8, 10)),
stroke = FALSE, fillOpacity = 0.5)
m <- leaflet(data = p) %>% setView()
m <- leaflet(data = p) %>% setView(lng = 0, lat= 0, 10)
places_map <- m %>% addProviderTiles("Stamen.Toner", options = providerTileOptions(opacity = 0.35)) %>%
addCircleMarkers(~long, ~lat, popup = ~as.character(lab),
radius = ~ifelse(total_months > 0 & total_months < 5, 5,
ifelse(total_months >= 5 & total_months < 10, 8, 10)),
stroke = FALSE, fillOpacity = 0.5)
places_map
m <- leaflet(data = p) %>% setView(lng = 0, lat= 0, 5)
places_map <- m %>% addProviderTiles("Stamen.Toner", options = providerTileOptions(opacity = 0.35)) %>%
addCircleMarkers(~long, ~lat, popup = ~as.character(lab),
radius = ~ifelse(total_months > 0 & total_months < 5, 5,
ifelse(total_months >= 5 & total_months < 10, 8, 10)),
stroke = FALSE, fillOpacity = 0.5)
places_map
m <- leaflet(data = p) %>% setView(lng = 0, lat= 0, 2)
places_map <- m %>% addProviderTiles("Stamen.Toner", options = providerTileOptions(opacity = 0.35)) %>%
addCircleMarkers(~long, ~lat, popup = ~as.character(lab),
radius = ~ifelse(total_months > 0 & total_months < 5, 5,
ifelse(total_months >= 5 & total_months < 10, 8, 10)),
stroke = FALSE, fillOpacity = 0.5)
places_map
