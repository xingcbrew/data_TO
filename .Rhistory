geom_bar(stat = "identity", alpha = 0.6) +
xlab("Person") + ylab("Expenditure") + ggtitle("Spending by Person Nov 4, 2015 - Nov 5, 2016") +
theme_economist()
# load libraries
library(dplyr)
library(ggplot2)
library(ggthemes)
library(tidyr)
library (reshape2)
# initalize folders
home <- "/Users/xing"
project <- paste0(home, "/Desktop/Budget_R/Data")
# read csv
dat1 <- read.csv(paste0(project, "/budget1.csv"))
# function to get rid of whitespaces
trim <- function(x) gsub("^\\s+|\\s+$", "", x)
dat1$person <- trim(dat1$person)
dat1$description <- trim(dat1$description)
dat1$details <- trim(dat1$details)
# change date format
dat1$date <- as.Date(dat1$date, format = "%m/%d/%Y")
#change columns into factors
dat1$person <- as.factor(dat1$person)
dat1$description <- as.factor(dat1$description)
#summary of dat1 descriptions
summary(dat1$description)
#change vacation into travel ### ?????
#dat1$description <- ifelse(dat1$description == "vacation", "travel", dat1$description)
#let's see how much each person spent
exp_by_person <- dat1 %>%
group_by(person, description) %>%
summarise(exp_person = sum(expenditure), na.rm = T)
#plotted
ggplot(exp_by_person, aes(person, exp_person, group = description, fill = description)) +
geom_bar(stat = "identity", alpha = 0.6) +
xlab("Person") + ylab("Expenditure") + ggtitle("Spending by Person Nov 4, 2015 - Nov 5, 2016") +
theme_economist()
dat1$description <- ifelse(dat1$description == "snack", "snsacks", dat1$description)
exp_by_person <- dat1 %>%
group_by(person, description) %>%
summarise(exp_person = sum(expenditure), na.rm = T)
#plotted
ggplot(exp_by_person, aes(person, exp_person, group = description, fill = description)) +
geom_bar(stat = "identity", alpha = 0.6) +
xlab("Person") + ylab("Expenditure") + ggtitle("Spending by Person Nov 4, 2015 - Nov 5, 2016") +
theme_economist()
# read csv
dat1 <- read.csv(paste0(project, "/budget1.csv"))
# function to get rid of whitespaces
trim <- function(x) gsub("^\\s+|\\s+$", "", x)
dat1$person <- trim(dat1$person)
dat1$description <- trim(dat1$description)
dat1$details <- trim(dat1$details)
# change date format
dat1$date <- as.Date(dat1$date, format = "%m/%d/%Y")
#change columns into factors
dat1$person <- as.factor(dat1$person)
dat1$description <- as.factor(dat1$description)
#summary of dat1 descriptions
summary(dat1$description)
#change vacation into travel ### ?????
#dat1$description <- ifelse(dat1$description == "vacation", "travel", dat1$description)
dat1$description <- ifelse(dat1$description = "snack", "snacks", dat1$description)
#let's see how much each person spent
exp_by_person <- dat1 %>%
group_by(person, description) %>%
summarise(exp_person = sum(expenditure), na.rm = T)
#plotted
ggplot(exp_by_person, aes(person, exp_person, group = description, fill = description)) +
geom_bar(stat = "identity", alpha = 0.6) +
xlab("Person") + ylab("Expenditure") + ggtitle("Spending by Person Nov 4, 2015 - Nov 5, 2016") +
theme_economist()
dat1 <- read.csv(paste0(project, "/budget1.csv"))
# function to get rid of whitespaces
trim <- function(x) gsub("^\\s+|\\s+$", "", x)
dat1$person <- trim(dat1$person)
dat1$description <- trim(dat1$description)
dat1$details <- trim(dat1$details)
# change date format
dat1$date <- as.Date(dat1$date, format = "%m/%d/%Y")
#change columns into factors
dat1$person <- as.factor(dat1$person)
dat1$description <- as.factor(dat1$description)
#summary of dat1 descriptions
summary(dat1$description)
dat1 <- read.csv(paste0(project, "/budget1.csv"))
home <- "/Users/xing"
project <- paste0(home, "/Desktop/Budget_R/Data")
# read csv
dat1 <- read.csv(paste0(project, "/budget1.csv"))
# function to get rid of whitespaces
trim <- function(x) gsub("^\\s+|\\s+$", "", x)
dat1$person <- trim(dat1$person)
dat1$description <- trim(dat1$description)
dat1$details <- trim(dat1$details)
# change date format
dat1$date <- as.Date(dat1$date, format = "%m/%d/%Y")
#change columns into factors
dat1$person <- as.factor(dat1$person)
dat1$description <- as.factor(dat1$description)
#summary of dat1 descriptions
summary(dat1$description)
dat1$description <-as.character(dat1$description)
dat1$description <- ifelse(dat1$description == "snack", "snacks", dat1$description)
dat1$description <- as.factor(dat1$description)
summary(dat1$description)
exp_by_person <- dat1 %>%
group_by(person, description) %>%
summarise(exp_person = sum(expenditure), na.rm = T)
#plotted
ggplot(exp_by_person, aes(person, exp_person, group = description, fill = description)) +
geom_bar(stat = "identity", alpha = 0.6) +
xlab("Person") + ylab("Expenditure") + ggtitle("Spending by Person Nov 4, 2015 - Nov 5, 2016") +
theme_economist()
ben_coffee <- dat1 %>%
filter(person == "Ben" & details == "coffee")
View(ben_coffee)
ben_coffee <- dat1 %>%
filter(person == "Ben" & description == "coffee")
View(ben_coffee)
summary(ben_coffee$details)
ben_coffee$details <- as.factor(ben_coffee$details)
summary(ben_coffee$details)
for (i in ben_coffee$description) {
ben_coffee$cum_exp[ben_coffee$description == i] <- cumsum(ben_coffee$expenditure[ben_coffee$description == i])
print(i)
}
ggplot(ben_coffee, aes(x=date, y=cum_exp)) +
geom_line(size = 1) +
xlab("Date") +
ylab("Cumulative Expenditure on Coffee") +
ggtitle("Ben's Spending on Coffee") + theme_economist()
ggplot(ben_coffee, aes(x=date, y=cum_exp)) +
geom_line(size = 2) +
xlab("Date") +
ylab("Cumulative Expenditure on Coffee from Nov 2015- Nov 2016") +
ggtitle("Ben's Spending on Coffee") + theme_economist()
ggplot(ben_coffee, aes(x=date, y=cum_exp)) +
geom_line(size = 2) +
xlab("Date") +
ylab("Cumulative Expenditure on Coffee") +
ggtitle("Ben's Spending on Coffee Nov 2015- Nov 2016") + theme_economist()
ggplot(ben_coffee, aes(x=date, y=cum_exp)) +
geom_line(size = 1) +
xlab("Date") +
ylab("Cumulative Expenditure on Coffee") +
ggtitle("Ben's Spending on Coffee Nov 2015- Nov 2016") + theme_economist()
View(dat1)
library(ggplot2)
library(dplyr)
library(reshape2)
library(ggmap)
library(rgdal)
library(rgeos)
library(maptools)
library(tidyr)
library(tmap)
library(raster) #to read in shapefile
library(sp)
install.packages("gridExtra")
library(rgdal)
library(rgeos)
library(raster)
library(maptools)
library(gridExtra)
lapply(libs, require, character.only = TRUE)
libs <- c("rgdal", "maptools", "gridExtra")
lapply(libs, require, character.only = TRUE)
n <- readOGR(dsn = "/Users/xing/Documents/data_TO/maps/NEIGHBORHOODS_WGS84")
n <- shapefile("/Users/xing/Documents/data_TO/maps/NEIGHBORHOODS_WGS84.shp")
head(n)
n@data
n.coords <- coordinates(n)
View(n.coords)
plot(n)
names(n)
dat1 <- read.csv("/Users/xing/Documents/data_TO/data/wellbeing_toronto.csv")
dat1$road_kms <- round(dat1$road_kms, digits = 2)
# add leading zeros to ID number to match map
dat1$neighbourhood_id[1:9] <- paste0("00", dat1$neighbourhood_id[1:9])
dat1$neighbourhood_id[10:99] <- paste0("0", dat1$neighbourhood_id[10:99])
# add new variables to dat1 (with percentages of certain variables)
dat1$percent_low_income <- round((dat1$low_income_population / dat1$total_population)*100, digits = 2)
dat1$percent_recent_imm <- round((dat1$recent_immigrant / dat1$total_population)*100, digits = 2)
dat1$perecent_visible_minority <- round((dat1$visible_minority / dat1$total_population)*100, digits = 2)
dat1$percent_unemployed <- round((dat1$unemployed / dat1$pop_15up)*100, digits = 2)
map <- shapefile("/Users/xing/Documents/data_TO/maps/NEIGHBORHOODS_WGS84.shp")
map.coords <- coordinates(map)
map@data <- left_join(map@data, dat1)
library(ggplot2)
library(dplyr)
library(reshape2)
library(ggmap)
library(rgdal)
library(rgeos)
library(maptools)
library(tidyr)
library(tmap)
library(raster) #to read in shapefile
library(sp)
library(ggthemes)
#set working directory
setwd("/Users/xing/Documents/data_TO")
# import data
dat1 <- read.csv("/Users/xing/Documents/data_TO/data/housing_prices.csv")
dat1$X <- NULL
# rm cols not needed for melting
dat1$neighbourhood_ids <- NULL
dat1$change_2015_2016 <- NULL
dat1$change_2012_2016 <- NULL
# remove rows that have at least na
dat1 <- dat1[complete.cases(dat1),]
# melt into long form by district
temp <- melt(dat1, id.vars = c('district'))
#plot housing price change by year
ggplot(data = temp, aes(x=variable, y=value, group=district, colour=district)) +
geom_smooth(se=F) +
xlab("Month/Year") +
ylab("House Price") +
ggtitle("Toronto House Prices by MLS District") +
scale_color_discrete(name = "Districts") +
scale_x_discrete(breaks=c("june_2012", "dec_2012", "june_2013", "dec_2013", "june_2014", "dec_2014",
"june_2015", "dec_2015", "june_2016", "nov_2016"),
labels=c("06/2012", "12/2012", "06/2013", "12/2013", "06/2014", "12/2014", "06/2015",
"12/2015", "06/2016", "11/2016")) +
theme_minimal()
n <- read.csv("/Users/xing/Documents/data_TO/data/wellbeing_toronto.csv")
# add leading zeros to ID number to match map
n$neighbourhood_id[1:9] <- paste0("00", n$neighbourhood_id[1:9])
n$neighbourhood_id[10:99] <- paste0("0", n$neighbourhood_id[10:99])
# read in map file
map <- shapefile("/Users/xing/Documents/data_TO/maps/NEIGHBORHOODS_WGS84.shp")
# rename neighbourhood_id to match maps in order to join
names(n)[names(n) == 'neighbourhood_id'] <- "AREA_S_CD"
# left_join dat1 to map
map@data <- left_join(map@data, n)
### to change map data into data.frame, use fortify() eg., map <- fortify(map)
map_f <- fortify(map)
# create a row with row ids in map so that can join with map_f (data.frame)
map$id <- row.names(n)
# join fortified map_f with map
map_f <- left_join(map_f, map@data)
# make map
?agregate
?aggregate
View(dat1)
View(map_f)
View(n)
View(n)
names(map)
aggregate(map, by = district, dissolve = T, areaWeighted = F)
aggregate(map, by = list(district), dissolve = T, areaWeighted = F)
dis <- raster::aggregate(map, 'district')
plot(dis)
View(dat1)
names(dis)
dis@data
dis@data <- left_join(dis@data, dat1)
dis@data
View(n)
dis <- raster::aggregate(map, 'district')
dis_f <- fortify(dis)
dis <- raster::aggregate(map, 'district')
dis@data <- left_join(dis@data, dat1)
dis_f <- fortify(dis)
head(dis)
dis$id <- row.names(dat1)
head(dis, 2)
dis_f <- left_join(dis_f, dis@data)
head(dis)
head(map)
View(dat1)
ggplot() +
geom_polygon(data = dis_f,
aes(x=long, y = lat, group = group, fill = june_2012),
color=transparent, size=0.25)
head(dis_f)
ggplot() +
geom_polygon(data = dis_f,
aes(x=long, y = lat, group = group, fill = june_2012),
color="transparent", size=0.25)
ggplot() +
geom_polygon(data = dis_f,
aes(x=long, y = lat, group = group, fill = june_2012),
color="transparent", size=0.25) +
scale_fill_distiller(name = "Housing Price", palette = 1, trans = "reverse") +
theme_nothing(legend=T)
dat1
View(dat1)
ggplot() +
geom_polygon(data = dis_f,
aes(x=long, y = lat, group = group, fill = june_2012),
color="transparent", size=0.25) +
scale_fill_distiller(name = "House Prices June 2012", palette = 1, trans = "reverse") +
theme_nothing(legend=T) +
geom_text(data = dat1, aes(long, lat, label = district), size = 2)
ggplot() +
geom_polygon(data = dis_f,
aes(x=long, y = lat, group = group, fill = june_2012),
color="transparent", size=0.25) +
scale_fill_distiller(name = "House Prices June 2012", palette = 1, trans = "reverse") +
theme_nothing(legend=T) +
geom_text(data = dis_f, aes(long, lat, label = district), size = 2)
?geom_text
ggplot() +
geom_polygon(data = dis_f,
aes(x=long, y = lat, group = group, fill = nov_2016),
color="transparent", size=0.25) +
scale_fill_distiller(name = "House Prices", palette = 1, trans = "reverse") +
theme_nothing(legend=T)
View(dat1)
View(dat1)
View(n)
dat1$home_price[dat1$district == "E04",]
dat1$neighbourhood[dat1$district = "E04",]
dat1$neighbourhood[dat1$district == "E04",]
n$neighbourhood[n$district == "E04",]
n$neighbourhood[n$home_price > "800000",]
n$neighbourhood[n$home_price]
n$neighbourhood[n$home_price > 800000,]
n$home_price > 80000
n$home_price > 800000
n$home_price > 1000000
ggplot() +
geom_polygon(data = dis_f,
aes(x=long, y = lat, group = group, fill = nov_2012),
color="transparent", size=0.25) +
scale_fill_distiller(name = "House Prices", palette = 1, trans = "reverse") +
theme_nothing(legend=T)
ggplot() +
geom_polygon(data = dis_f,
aes(x=long, y = lat, group = group, fill = dec_2012),
color="transparent", size=0.25) +
scale_fill_distiller(name = "House Prices", palette = 1, trans = "reverse") +
theme_nothing(legend=T)
View(n)
dat1
dat1$per_change <- (dat1$nov_2016-dat1$june_2012)/dat1$june_2012*100
View(dat1)
ggplot() +
geom_polygon(data = dis_f,
aes(x=long, y = lat, group = group, fill = per_change),
color="transparent", size=0.25) +
scale_fill_distiller(name = "House Prices", palette = 1, trans = "reverse") +
theme_nothing(legend=T)
d
d
dis@data <- left_join(dis@data, dat1)
# fortify dis map
dis_f <- fortify(dis)
# create col with row ids to join
dis$id <- row.names(dat1)
# join dis_f with dis
dis_f <- left_join(dis_f, dis@data)
# make thematic map of housing prices by district
ggplot() +
geom_polygon(data = dis_f,
aes(x=long, y = lat, group = group, fill = per_change),
color="transparent", size=0.25) +
scale_fill_distiller(name = "House Prices", palette = 1, trans = "reverse") +
theme_nothing(legend=T)
dat1 <- read.csv("/Users/xing/Documents/data_TO/data/housing_prices.csv")
View(dat1)
dat1$neighbourhood_ids <- NULL
dis@data <- left_join(dis@data, dat1)
# fortify dis map
dis_f <- fortify(dis)
# create col with row ids to join
dis$id <- row.names(dat1)
# join dis_f with dis
dis_f <- left_join(dis_f, dis@data)
# make thematic map of housing prices by district
ggplot() +
geom_polygon(data = dis_f,
aes(x=long, y = lat, group = group, fill = per_change),
color="transparent", size=0.25) +
scale_fill_distiller(name = "House Prices", palette = 1, trans = "reverse") +
theme_nothing(legend=T)
ggplot() +
geom_polygon(data = dis_f,
aes(x=long, y = lat, group = group, fill = nov_2016),
color="transparent", size=0.25) +
scale_fill_distiller(name = "House Prices", palette = 1, trans = "reverse") +
theme_nothing(legend=T)
d
dat1 <- read.csv("/Users/xing/Documents/data_TO/data/housing_prices.csv")
dat1$neighbourhood_ids <- NULL
dat1 <- dat1[complete.cases(dat1),]
dat1$change_2015_2016 <- NULL
dat1$change_2012_2016 <- NULL
temp <- melt(dat1, id.vars = c('district'))
#plot housing price change by year
ggplot(data = temp, aes(x=variable, y=value, group=district, colour=district)) +
geom_smooth(se=F) +
xlab("Month/Year") +
ylab("House Price") +
ggtitle("Toronto House Prices by MLS District") +
scale_color_discrete(name = "Districts") +
scale_x_discrete(breaks=c("june_2012", "dec_2012", "june_2013", "dec_2013", "june_2014", "dec_2014",
"june_2015", "dec_2015", "june_2016", "nov_2016"),
labels=c("06/2012", "12/2012", "06/2013", "12/2013", "06/2014", "12/2014", "06/2015",
"12/2015", "06/2016", "11/2016")) +
theme_minimal()
ggplot(data = dat1, aes(x=reorder(district, change_2012_2016), y=change_2012_2016)) +
geom_bar(stat = "identity") +
xlab("District") +
ylab("Percentage Increase in Price") +
ggtitle("Percent of Increase in Average House Prices, 2012-2016") +
theme_economist_white()
# read in neighbourhood data
n <- read.csv("/Users/xing/Documents/data_TO/data/wellbeing_toronto.csv")
n$neighbourhood_id[1:9] <- paste0("00", n$neighbourhood_id[1:9])
n$neighbourhood_id[10:99] <- paste0("0", n$neighbourhood_id[10:99])
# read in map file
names(n)[names(n) == 'neighbourhood_id'] <- "AREA_S_CD"
# left_join dat1 to map
map@data <- left_join(map@data, n)
### to change map data into data.frame, use fortify() eg., map <- fortify(map)
map_f <- fortify(map)
# create a col with row ids in map so that can join with map_f (data.frame)
map$id <- row.names(n)
# join fortified map_f with map
map_f <- left_join(map_f, map@data)
dis <- raster::aggregate(map, 'district')
dis@data <- left_join(dis@data, dat1)
dis_f <- fortify(dis)
# create col with row ids to join
dis$id <- row.names(dat1)
# join dis_f with dis
dis_f <- left_join(dis_f, dis@data)
ggplot() +
geom_polygon(data = dis_f,
aes(x=long, y = lat, group = group, fill = nov_2016),
color="transparent", size=0.25) +
scale_fill_distiller(name = "House Prices", palette = 1, trans = "reverse") +
theme_nothing(legend=T)
ggplot() +
geom_polygon(data = dis_f,
aes(x=long, y = lat, group = group, fill = dec_2012),
color="transparent", size=0.25) +
scale_fill_distiller(name = "House Prices", palette = 1, trans = "reverse") +
theme_nothing(legend=T)
ggplot() +
geom_polygon(data = dis_f,
aes(x=long, y = lat, group = group, fill = dec_2012),
color="transparent", size=0.25) +
scale_fill_distiller(name = "House Prices", palette = 1, trans = "reverse") +
theme_nothing(legend=T) +
scale_fill_gradientn(colours=topo.colors(7), na.value = "transparent",
breaks=c(500000,750000,1000000),labels=c("Low","Med","High"),
limits=c(500000,1250000))
ggplot() +
geom_polygon(data = dis_f,
aes(x=long, y = lat, group = group, fill = dec_2012),
color="transparent", size=0.25) +
scale_fill_distiller(name = "House Prices", palette = 1, trans = "reverse") +
theme_nothing(legend=T) +
scale_fill_gradientn(breaks=c(500000,750000,1000000),labels=c("Low","Med","High"),
limits=c(500000,1250000))
ggplot() +
geom_polygon(data = dis_f,
aes(x=long, y = lat, group = group, fill = dec_2012),
color="transparent", size=0.25) +
# scale_fill_distiller(name = "House Prices", palette = 1, trans = "reverse") +
theme_nothing(legend=T) +
scale_fill_gradientn(breaks=c(500000,750000,1000000),labels=c("Low","Med","High"),
limits=c(500000,1250000))
ggplot() +
geom_polygon(data = dis_f,
aes(x=long, y = lat, group = group, fill = dec_2012),
color="transparent", size=0.25) +
# scale_fill_distiller(name = "House Prices", palette = 1, trans = "reverse") +
theme_nothing(legend=T) +
scale_fill_gradientn(colours=topo.colors(7), na.value = "transparent",
breaks=c(500000,750000,1000000),labels=c("Low","Med","High"),
limits=c(500000,1250000))
ggplot() +
geom_polygon(data = dis_f,
aes(x=long, y = lat, group = group, fill = dec_2012),
color="transparent", size=0.25) +
# scale_fill_distiller(name = "House Prices", palette = 1, trans = "reverse") +
theme_nothing(legend=T) +
scale_fill_gradientn(palette = 1,
breaks=c(500000,750000,1000000),labels=c("Low","Med","High"),
limits=c(500000,1250000))
ggplot() +
geom_polygon(data = dis_f,
aes(x=long, y = lat, group = group, fill = dec_2012),
color="transparent", size=0.25) +
# scale_fill_distiller(name = "House Prices", palette = 1, trans = "reverse") +
theme_nothing(legend=T) +
scale_fill_gradientn(colors = rainbow,
breaks=c(500000,750000,1000000),labels=c("Low","Med","High"),
limits=c(500000,1250000))
ggplot() +
geom_polygon(data = dis_f,
aes(x=long, y = lat, group = group, fill = dec_2012),
color="transparent", size=0.25) +
scale_fill_distiller(name = "House Prices", palette = 1, trans = "reverse", limits = c(500000, 125000)) +
theme_nothing(legend=T)
ggplot() +
geom_polygon(data = dis_f,
aes(x=long, y = lat, group = group, fill = dec_2012),
color="transparent", size=0.25) +
scale_fill_distiller(name = "House Prices", palette = 1, trans = "reverse", limits = c(300000, 1400000)) +
theme_nothing(legend=T)
ggplot() +
geom_polygon(data = dis_f,
aes(x=long, y = lat, group = group, fill = dec_2012),
color="transparent", size=0.25) +
scale_fill_distiller(name = "House Prices", palette = 1, trans = "reverse") +
theme_nothing(legend=T)
